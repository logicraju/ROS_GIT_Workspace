// Generated by gencpp from file asimov_tasks_package/calc_serviceRequest.msg
// DO NOT EDIT!


#ifndef ASIMOV_TASKS_PACKAGE_MESSAGE_CALC_SERVICEREQUEST_H
#define ASIMOV_TASKS_PACKAGE_MESSAGE_CALC_SERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace asimov_tasks_package
{
template <class ContainerAllocator>
struct calc_serviceRequest_
{
  typedef calc_serviceRequest_<ContainerAllocator> Type;

  calc_serviceRequest_()
    : num1(0.0)
    , num2(0.0)
    , operation_id(0)  {
    }
  calc_serviceRequest_(const ContainerAllocator& _alloc)
    : num1(0.0)
    , num2(0.0)
    , operation_id(0)  {
  (void)_alloc;
    }



   typedef double _num1_type;
  _num1_type num1;

   typedef double _num2_type;
  _num2_type num2;

   typedef int64_t _operation_id_type;
  _operation_id_type operation_id;





  typedef boost::shared_ptr< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct calc_serviceRequest_

typedef ::asimov_tasks_package::calc_serviceRequest_<std::allocator<void> > calc_serviceRequest;

typedef boost::shared_ptr< ::asimov_tasks_package::calc_serviceRequest > calc_serviceRequestPtr;
typedef boost::shared_ptr< ::asimov_tasks_package::calc_serviceRequest const> calc_serviceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace asimov_tasks_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'asimov_tasks_package': ['/home/rajesh/ROS_GIT_Workspace/ROS_Projects/src/asimov_tasks_package/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e93988f335420779d1352069758f466";
  }

  static const char* value(const ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e93988f33542077ULL;
  static const uint64_t static_value2 = 0x9d1352069758f466ULL;
};

template<class ContainerAllocator>
struct DataType< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "asimov_tasks_package/calc_serviceRequest";
  }

  static const char* value(const ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 num1\n\
float64 num2\n\
int64 operation_id\n\
";
  }

  static const char* value(const ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num1);
      stream.next(m.num2);
      stream.next(m.operation_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct calc_serviceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::asimov_tasks_package::calc_serviceRequest_<ContainerAllocator>& v)
  {
    s << indent << "num1: ";
    Printer<double>::stream(s, indent + "  ", v.num1);
    s << indent << "num2: ";
    Printer<double>::stream(s, indent + "  ", v.num2);
    s << indent << "operation_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.operation_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASIMOV_TASKS_PACKAGE_MESSAGE_CALC_SERVICEREQUEST_H
